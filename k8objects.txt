Format of pod manifest

File_name:  pod1.yaml

kind: Pod                       #kind is "Pod" for creating pod                 
apiVersion: v1                  #Api version for interacting with the K8S             
metadata:                       #Metadata for the pod               
  name: testpod                 #Name of the pod       
spec:                                    
  containers:                      
    - name: c00                 #Container name                
      image: ubuntu             #Image name            
      command: ["/bin/bash", "-c", "while true; do echo Hello Sanjay; sleep 5 ; done"]
  restartPolicy: Never          # Defaults to Always

Annotations
- Annotations is used for adding descriptions to the pod
- Annotations are defined in the metadata section 
- specified in the manifest
- Example
--------------------------------------------------------------------------------------------------------
kind: Pod                              
apiVersion: v1                     
metadata:                           
  name: testpod  
  annotations:
    description: This is first K8S pod (annotations)                
spec:                                    
  containers:                      
    - name: c00                     
      image: ubuntu              
      command: ["/bin/bash", "-c", "while true; do echo Hello Sanjay; sleep 5 ; done"]
  restartPolicy: Never         # Defaults to Always
--------------------------------------------------------------------------------------------------------
Multicontainer Pod
--------------------------------------------------------------------------------------------------------
- Multiple containers can be created in a pod; however, it is recommended to create one container/pod
- Even for mulitple containers per pod, one ip address will be assigned to the pod. 
- Internal communication between the containers can be done using "http://localhost:<port-no>" command
- refer to the "multicontainerPod.yaml" manifest for example

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Defining Environment Variables in pods
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
- it is used to set some Environment variables for the pod
- useful for activities like passing secrets to the pod
- For pods, environement variables are defined in the spec section with "env:" keyword followed by key value pair.
- We can define any number of environement variables
- Example for the same is in "EnvVarPod.yaml" maintest

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Defining open port on the pods
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
- We can open ports in the spec section  with keyword "- containerPort:<port-no>"
- Useful for opening the ports for required applications 
- We will try with example of Tomcat Server by opening port no 80

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Labels and Selectors
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
- Labels are the mechanisms you use to Organize Kubernetes objects
- A label is a key-value pair without any predefined meaning that can be attached to a object
- Labels are similar to tags in AWS or git where you use a name for quick reference.
- You are free to choose labels as you need it to refer an environement which is used for dev or testing 
  or production, refer a product group like Department A, Department B.

- Multiple Lables can be given to a single object
- Labels are defined in the metadata section of the manifest
- example is given in the podTomcat.yaml and podFirst.yaml manifest
- kubectl commands for Labels 
    - labels can be seen using below commands
        - kubectl get pods --show-labels 
    - adding new labels to an existing pod
        - kubectl label pods tomcat cloud=false
    - listing pods matching a label
        - kubectl get pods -l env=dev  
    - listing condition can be defined as not equal as well 
        - kubectl get pods -l env!=dev
    - other operations also can be performed based on list condition
        - kubectl delete pod -l env!=dev   
        above command can delete multiple containers.
- Unlike name/UIDs, lables do not provide uniqueness, as in general, 
  we can expect many objects to carry the same label

- Once labels are attached to an object, we would need filters to narrow down
  these are called label selectors.
- The api currently supports two types of selectors 
    - equality based (= and !=)
        example env!=prod
    - set based (in, notin and exists)
        'env in (dev,prod,stage)'
        'env notin (dev,stage)'
- A label selector can be made of multiple requirements which are comma seperated
- mutiple values also can be matched together
    - kubectl get pods -l env=dev, app=tomcat, cloud=true 

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Node Selector (a use case for Label selector)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
One use case for Label Selector can be is to constrain the set of nodes on to which a 
pod can be scheduled. 
 - Generally such constraints are not required because the scheduler will do the 
   reasonable placement on the cluster; however in some cases we might need it.
 - we can use labels to tag nodes.
 - Once the nodes are tagged, you can use the label selectors to specify the pod to 
   run only at specific nodes.

 - node selector is defined in the spec section with "nodeSelector:" keyword
 - The object (pod) will not be created until the condition is met on the cluster.
 - kubectl get pods commands will show the status as pending.
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Scaling and Replication
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
- Kubernetes was designed to orchestrate multiple containers and replication
- Need for multiple containers/replication helps us with these.
- Reliablity: It help in getting high reliablity; in case any container fails, application will not
  get down.
- Load Balancing: Having mulitple versions of a containers enables you to easily send traffic to different
  instances to prevent overloading of a single instance or node.
- Scaling : When load does become too much for the number of existing instances,
  Kubernetes enables you to easily scale up/down your application, adding additional instances
  as needed.
- Rolling Updates: Updates to a service by replacing podes one by one.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Replication Controller (rc) 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
- A replication controller is a object that enables you to easily create multiple pods on request, then make sure
  that number of pods always exist.
- If a pod created using RC will be automatically replaced in case of crash/fail or termination action.
- RC is recommended if you just want to make sure that fix number of pods are always running, 
  even after reboot of the instance.
- In case you create RC with 1 replica & the RC will make sure that one pod is always 
  running.
- While scaling down K8S delete the most recent containers 
- Please refer to the "rcUbuntu.yaml" for Replication Controller Manifest example

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Replication Set (rs) 
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
- A replica Set is next generation Replication Controller. 
- replication Controller only supports equality based selector, whereas the replica set supports set-based 
  selector
- replicaset rather than replication controller is used by other objects like Deployment
- difference in the manifest
    Replication Controller                                     replicaset
  kind: ReplicationController                           kind: Replicaset
  apiVersion: v1                                        apiVersion: apps/v1
  selector:                                             selector:
    env: dev                                            env in (dev, staging, prod)

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Kubernetes (K8s) Deployment Objects
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Replication Controller and replicaset is not able to do the updates and rollback apps in the cluster.
- A deployment object acts as a supervisor for pods, giving you fine grained control over how and when a new
  pod is rolled out, updated or rolled back to a previous state.
- When using deployment object, we first define the state of the app, then K8s cluster schedules mentioned app
  instance onto specific individual nodes.
- A deployment provides declarative updates for pods & replicaset.
- K8s then monitors, if the node hosting an instance goes down or pod is deleted; the deployment controller 
  replaces it.
- This provides a self-healing mechanism to address machine failure or maintenance.
- Below are the typical use cases of deployment:
    1. Create a deployment to rollout a replicaset 
       The replicaset creates pods in the background and checks the status of the rollout to see if it succeeds or not.
    2. Declare new state of the pods -> 
       By updating the podTemplateSpec of the deployment, a new replicaset is created and the deployment manages moving the pods from the old replicaset to the new
       one at a controlled rate. Each new replicaset updates the revision of the deployment.
    3. Rollback to an earlier deployment revision. If the current state of the deployment is not stable, each rollback updates
       the revision of the deployment.
    4. Scale up the deployment to facilitates more load
    5. Pause the deployment to apply multiple fixes to its podTemplateSpec and then resume it to start a new rollout.
    6. Cleanup older replicasets that you don't need anymore.
- If there are problems in the deployment, Kubernetes will automatically rollback to the previous version; however, you can also 
  explicitely rollback to a specific revision, as in our case to revision 1 (the original pod version)
- You can rollback to a specific version by specifying it with --to-revision

for example: kubectl rollout undo deploy/mydeployments --to-revision=2
Note: The name of the replicaset is always formatted as [deployment-name]-[random-string]

"kubectl get deploy" command can be used to get the deployments.
While inspecting the deployments, we can see the below fields: 
NAME - List the name of the deployments in the namespace.
READY - Display how many replicas of the application are available to your users. If follows the pattern ready/Desired.
UP-TO-DATE - Display the number of replicas that have been updated to achive the desired state.
AVAILABLE - Displays how many replicas of the application are available to your users.
AGE - Displays the amount of the time that the application has been running.

Reasons for failed deployments:
Your deployment may get stuck trying to deploy its newest replicaset without ever completing.
This can occur due to some of the following factors:
1. Insufficient Quota
2. Readiness Proble Failure
3. Image pull errors
4. Insufficient permissions
5. Limit Ranges
6. Application runtime misconfiguration




         













 



    
    

    




+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


















   

    


    

    

            








     

    


